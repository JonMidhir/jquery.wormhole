// Generated by CoffeeScript 1.4.0
(function() {
  var $;

  $ = jQuery;

  $.fn.isWorm = function() {
    return $(this).data('isWorm') === true || $(this).data('isClone') === true;
  };

  $.fn.explicitlyPosition = function() {
    if ($(this).css('position') === "static") {
      return $(this).css('position', 'relative');
    }
  };

  $.fn.explicitlyPositionAbsolute = function() {
    if ($(this).css('position') !== 'absolute') {
      return $(this).css('position', 'absolute');
    }
  };

  $.fn.containmentCoordinates = function() {
    var offset;
    offset = $(this).offset();
    return [offset.left, offset.top - $(this).height(), offset.left + $(this).width() - $(this).width(), offset.top + ($(this).height() * 2)];
  };

  $.fn.cloneAsWorm = function(deep) {
    var $cloneWorm;
    return $cloneWorm = $(this).clone(deep).data('isClone', true);
  };

  $.fn.wormHole = function(options) {
    var defaults;
    defaults = {
      group: 'default',
      selector: '*',
      stop: function() {}
    };
    options = $.extend(defaults, options);
    return this.each(function() {
      var $thisObject;
      $thisObject = $(this);
      $thisObject.css("overflow", 'hidden');
      $thisObject.explicitlyPosition();
      $thisObject.find(options.selector).each(function() {
        return $(this).explicitlyPositionAbsolute();
      });
      $thisObject.data('wormGroup', options.group);
      $thisObject.addClass('wormgroup-' + options.group);
      return $thisObject.delegate(options.selector, 'mouseover', function() {
        if (!$(this).isWorm()) {
          $(this).draggable("option", "containment", $(this).containmentCoordinates());
          $(this).draggable("option", "stack", options.selector);
          return $(this).worm(options.group, $thisObject, options.stop);
        }
      });
    });
  };

  $.fn.worm = function(group, parent, stopCallback) {
    var $cloneWorm, $nextWormHole, $prevWormHole;
    if (stopCallback == null) {
      stopCallback = function() {};
    }
    if (!this.isWorm()) {
      $nextWormHole = parent.next('.wormgroup-' + group);
      $prevWormHole = parent.prev('.wormgroup-' + group);
      $(this).data('isWorm', true);
      $cloneWorm = $(this).cloneAsWorm(true);
      this.bind('drag', function(event, ui) {
        var newHeight;
        if ($(this).position().top + $(this).height() > parent.height() && $nextWormHole.length > 0) {
          newHeight = $(this).position().top - parent.height();
          $cloneWorm.css('left', $(this).css('left')).css('opacity', $(this).css('opacity')).css('top', newHeight + "px");
          if (!$(this).data('hasClone')) {
            $nextWormHole.append($cloneWorm);
            return $(this).data('hasClone', true);
          } else if ($(this).position().top < 0 && $prevWormHole.length > 0) {
            newHeight = $(this).position().top + parent.height();
            $cloneWorm.css('left', $(this).css('left')).css('opacity', $(this).css('opacity')).css('top', newHeight + "px");
            if (!$(this).data('hasClone')) {
              $prevWormHole.append($cloneWorm);
              return $(this).data('hasClone', true);
            }
          }
        }
      });
      this.bind("dragstop", function(event, ui) {
        var draggableOptions, newHeight;
        if ($(this).position().top > parent.height()) {
          draggableOptions = $(this).data("uiDraggable").options;
          $(this).css('top', $cloneWorm.position().top + 'px');
          $cloneWorm.replaceWith($(this));
          stopCallback;

          $(this).unbind('drag').unbind('dragstop');
          $(this).draggable(draggableOptions);
          return $(this).data('isWorm', false).data('hasClone', false);
        } else if ($(this).position().top + $(this).height() > parent.height()) {
          newHeight = $(this).position().top - parent.height();
          return $cloneWorm.css('left', $(this).css('left')).css('opacity', $(this).css('opacity')).css('top', newHeight + "px");
        } else if ($(this).position().top <= (0 - $(this).height())) {
          draggableOptions = $(this).data("draggable").options;
          $(this).css('top', $cloneWorm.position().top + 'px');
          $cloneWorm.replaceWith($(this));
          stopCallback;

          $(this).unbind('drag').unbind('dragstop');
          $(this).draggable(draggableOptions);
          return $(this).data('isWorm', false).data('hasClone', false);
        } else if ($(this).position().top < 0) {
          newHeight = $(this).position().top + parent.height();
          return $cloneWorm.css('left', $(this).css('left')).css('opacity', $(this).css('opacity')).css('top', newHeight + "px");
        } else {
          $cloneWorm.detach();
          return $(this).data('hasClone', false);
        }
      });
    }
    return this;
  };

}).call(this);
