// Generated by CoffeeScript 1.4.0
(function() {
  var $;

  $ = jQuery;

  $.fn.wormHole = function(options) {
    var defaults;
    defaults = {
      group: 'default',
      selector: '*',
      stop: function() {}
    };
    options = $.extend(defaults, options);
    return this.each(function() {
      var $thisObject;
      $thisObject = $(this);
      $thisObject.css("overflow", 'hidden');
      if ($thisObject.css('position') === "static") {
        $thisObject.css('position', 'relative');
      }
      $thisObject.find(options.selector).each(function() {
        if ($(this).css('position') !== 'absolute') {
          return $(this).css('position', 'absolute');
        }
      });
      $thisObject.data('wormGroup', options.group);
      $thisObject.addClass('wormgroup-' + options.group);
      return $thisObject.delegate(options.selector, 'mouseover', function() {
        var containmentCoords;
        if ($(this).data('isWorm') !== true && $(this).data('isClone') !== true) {
          containmentCoords = [$thisObject.offset().left, $thisObject.offset().top - $thisObject.height(), $thisObject.offset().left + $thisObject.width() - $(this).width(), $thisObject.offset().top + ($thisObject.height() * 2)];
          $(this).draggable("option", "containment", containmentCoords);
          $(this).draggable("option", "stack", options.selector);
          return $(this).isWorm(options.group, $thisObject, options.stop);
        }
      });
    });
  };

  $.fn.worm = function(group, parent, stopCallback) {
    var $nextWormHole, $prevWormHole;
    if (stopCallback == null) {
      stopCallback = function() {};
    }
    if (this.data('isWorm') !== true) {
      $nextWormHole = parent.next('.wormgroup-' + group);
      $prevWormHole = parent.prev('.wormgroup-' + group);
      this.bind('dragstart', function(event, ui) {
        var $cloneWorm;
        if ($cloneWorm === void 0) {
          $cloneWorm = $(this).clone(true);
          $cloneWorm.data('isClone', true);
          return $(this).data('isWorm', true);
        }
      });
      this.bind('drag', function(event, ui) {
        var newHeight;
        if ($(this).position().top + $(this).height() > parent.height() && $nextWormHole.length > 0) {
          newHeight = $(this).position().top - parent.height();
          $cloneWorm.css('left', $(this).css('left')).css('opacity', $(this).css('opacity')).css('top', newHeight + "px");
          if (!$(this).data('hasClone')) {
            $nextWormHole.append($cloneWorm);
            return $(this).data('hasClone', true);
          } else if ($(this).position().top < 0 && $prevWormHole.length > 0) {
            newHeight = $(this).position().top + parent.height();
            $cloneWorm.css('left', $(this).css('left')).css('opacity', $(this).css('opacity')).css('top', newHeight + "px");
            if (!$(this).data('hasClone')) {
              $prevWormHole.append($cloneWorm);
              return $(this).data('hasClone', true);
            }
          }
        }
      });
      return this.bind("dragstop", function(event, ui) {
        var draggableOptions, newHeight;
        if ($(this).position().top > parent.height()) {
          draggableOptions = $(this).data("draggable").options;
          $(this).css('top', $cloneWorm.position().top + 'px');
          $cloneWorm.replaceWith($(this));
          delete $cloneWorm;
          stopCallback;

          $(this).unbind('drag').unbind('dragstop');
          $(this).draggable(draggableOptions);
          return $(this).data('isWorm', false).data('hasClone', false);
        } else if ($(this).position().top + $(this).height() > parent.height()) {
          newHeight = $(this).position().top - parent.height();
          return $cloneWorm.css('left', $(this).css('left')).css('opacity', $(this).css('opacity')).css('top', newHeight + "px");
        } else if ($(this).position().top <= (0 - $(this).height())) {
          draggableOptions = $(this).data("draggable").options;
          $(this).css('top', $cloneWorm.position().top + 'px');
          $cloneWorm.replaceWith($(this));
          delete $cloneWorm;
          stopCallback;

          $(this).unbind('drag').unbind('dragstop');
          $(this).draggable(draggableOptions);
          return $(this).data('isWorm', false).data('hasClone', false);
        } else if ($(this).position().top < 0) {
          newHeight = $(this).position().top + parent.height();
          return $cloneWorm.css('left', $(this).css('left')).css('opacity', $(this).css('opacity')).css('top', newHeight + "px");
        } else {
          $cloneWorm.detach();
          return $(this).data('hasClone', false);
        }
      });
    }
  };

}).call(this);
